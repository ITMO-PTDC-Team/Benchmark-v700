name: C++ CI

on: [push]
# :
#     branches: [ main, cpp-develop ]
#     paths: [ 'cpp/**' ] 
#   pull_request:
#     branches: [ main, cpp-develop ]
#     paths: [ 'cpp/**' ]

env:
  MAKE_JOBS: ${{ github.runner.os == 'Linux' && '$(nproc)' || '4' }}
  BUILD_JOBS: ${{ github.runner.os == 'Linux' && '$(nproc)' || '4' }}
  BUILD_DIR: cpp/build
  CMAKE_ARGS: -DCMAKE_BUILD_TYPE=Release

jobs:

  # ==================== TEST STAGE ====================
  test_benchmark_options:
    name: "Test Microbench (Build Options)"

    strategy:
      matrix:
        toolchain:
          - { name: Linux/GCC,   os: ubuntu-24.04, compiler: gcc , compiler_version: 13, c_compiler: "gcc", cxx_compiler: "g++"}
          - { name: Linux/Clang, os: ubuntu-24.04, compiler: clang, compiler_version: 18, c_compiler: "clang", cxx_compiler: "clang++" }
        # use_asserts: ["ON", "OFF"]
        # use_timelines: ["ON", "OFF"]
        # has_libpapi: ["ON", "OFF"]
        # has_libnuma: ["ON", "OFF"]
        # use_openmp: ["ON", "OFF"]
        # exclude:
        #   - use_timelines: "ON"
        #     use_openmp: "OFF"
        #   - has_libpapi: "OFF"
        #     use_timelines: "ON"
        #   - toolchain: {compiler: clang}
        #     use_openmp: "ON"

    container:
      image:
        ${{
        contains(matrix.toolchain.os, 'ubuntu') &&
        format('ghcr.io/altickium/benchmark-{0}:{1}', matrix.toolchain.compiler, matrix.toolchain.compiler_version) ||
        null
        }}
      options:
        --workdir /github/workspace --security-opt seccomp=unconfined

    runs-on: ${{matrix.toolchain.os}}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      # - name: Test Different Build Flags
      #   working-directory: ./cpp/build
      #   run: |
      #     echo "#########################################################"
      #     echo "## Building with flags:"
      #     echo "##   USE_ASSERTS=${{ matrix.use_asserts }}"
      #     echo "##   USE_TIMELINES=${{ matrix.use_timelines }}"
      #     echo "##   HAS_LIBPAPI=${{ matrix.has_libpapi }}"
      #     echo "##   HAS_LIBNUMA=${{ matrix.has_libnuma }}"
      #     echo "##   USE_OPENMP=${{ matrix.use_openmp }}"
      #     echo "##   C_COMPILER=${{ matrix.toolchain.c_compiler }}"
      #     echo "##   CXX_COMPILER=${{ matrix.toolchain.cxx_compiler }}"
      #     echo "#########################################################"
      #     cmake -B build \
      #       -DCMAKE_C_COMPILER=${{ matrix.toolchain.c_compiler }} \
      #       -DCMAKE_CXX_COMPILER=${{ matrix.toolchain.cxx_compiler }} \
      #       -DUSE_ASSERTS=${{ matrix.use_asserts }} \
      #       -DUSE_TIMELINES=${{ matrix.use_timelines }} \
      #       -DHAS_LIBPAPI=${{ matrix.has_libpapi }} \
      #       -DHAS_LIBNUMA=${{ matrix.has_libnuma }} \
      #       -DUSE_OPENMP=${{ matrix.use_openmp }}

      #     cmake --build .. --parallel ${{ env.BUILD_JOBS }}


      # - name: Test Reclaimers and Pools
      #   working-directory: ./cpp/build
      #   run: |
      #     cmake -DDATA_STRUCTURES="brown_ext_abtree_lf_reclaimers" \
      #           -DRECLAIM="none;debra;debracap;ebr_token;ebr_tree;hazardptr" \
      #           -DPOOLS="none;numa" ..
      #     cmake --build . --parallel ${{ env.BUILD_JOBS }}

      - name: Simple Test
        working-directory: ./cpp/build
        run: |
          cmake -B . .. \
            -DCMAKE_C_COMPILER=${{ matrix.toolchain.c_compiler }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.toolchain.cxx_compiler }}

          cmake --build . --target aksenov_splaylist_64.debra --parallel ${{ env.BUILD_JOBS }}
          cd ../microbench
          LD_PRELOAD=../lib/libmimalloc.so ../build/aksenov_splaylist_64.debra -json-file json_example/example.json -result-file json_example/result.json 

    
